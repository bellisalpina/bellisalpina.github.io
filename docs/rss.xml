<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Bellisalpina</title><link>https://bellisalpina.github.io</link><description>Meet me in the afterglow</description><copyright>Bellisalpina</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://s2.loli.net/2024/10/09/nZ3z81Mu4OIFshE.jpg</url><title>avatar</title><link>https://bellisalpina.github.io</link></image><lastBuildDate>Mon, 20 Oct 2025 11:51:52 +0000</lastBuildDate><managingEditor>Bellisalpina</managingEditor><ttl>60</ttl><webMaster>Bellisalpina</webMaster><item><title>在 Debian 12 上配置 TeamSpeak 3 服务器为 systemd 服务</title><link>https://bellisalpina.github.io/post/zai-%20Debian%2012%20-shang-pei-zhi-%20TeamSpeak%203%20-fu-wu-qi-wei-%20systemd%20-fu-wu.html</link><description># 在 Debian 12 上配置 TeamSpeak 3 服务器为 systemd 服务

本文将介绍如何在 Debian 12 系统中为 TeamSpeak 3 服务器创建专用用户，并配置为 systemd 服务以实现开机自启，提升安全性和可管理性。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/zai-%20Debian%2012%20-shang-pei-zhi-%20TeamSpeak%203%20-fu-wu-qi-wei-%20systemd%20-fu-wu.html</guid><pubDate>Sat, 18 Oct 2025 16:29:38 +0000</pubDate></item><item><title>使用Windows PowerShell放行防火墙端口</title><link>https://bellisalpina.github.io/post/shi-yong-Windows%20PowerShell-fang-xing-fang-huo-qiang-duan-kou.html</link><description># 使用Windows PowerShell放行防火墙端口

### ⚠️ 重要前提：以管理员身份运行 PowerShell
所有修改防火墙规则的命令都需要管理员权限。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/shi-yong-Windows%20PowerShell-fang-xing-fang-huo-qiang-duan-kou.html</guid><pubDate>Wed, 15 Oct 2025 04:51:13 +0000</pubDate></item><item><title>解决 53 端口被 systemd-resolved 占用的问题</title><link>https://bellisalpina.github.io/post/jie-jue-%2053%20-duan-kou-bei-%20systemd-resolved%20-zhan-yong-de-wen-ti.html</link><description># 解决 53 端口被 systemd-resolved 占用的问题

当你需要自行安装 DNS 服务时，会发现 `systemd-resolved` 服务默认占用了 53 端口。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/jie-jue-%2053%20-duan-kou-bei-%20systemd-resolved%20-zhan-yong-de-wen-ti.html</guid><pubDate>Sat, 11 Oct 2025 03:26:42 +0000</pubDate></item><item><title>使用 OpenSSL 为私网 IP 生成自签名证书</title><link>https://bellisalpina.github.io/post/shi-yong-%20OpenSSL%20-wei-si-wang-%20IP%20-sheng-cheng-zi-qian-ming-zheng-shu.html</link><description># 使用 OpenSSL 为私网 IP 生成自签名证书

以下是为内网 IP `192.168.0.1` 和 `172.16.0.1` 生成自签名证书的完整步骤。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/shi-yong-%20OpenSSL%20-wei-si-wang-%20IP%20-sheng-cheng-zi-qian-ming-zheng-shu.html</guid><pubDate>Mon, 06 Oct 2025 14:21:02 +0000</pubDate></item><item><title>FFmpeg 常用命令参考</title><link>https://bellisalpina.github.io/post/FFmpeg%20-chang-yong-ming-ling-can-kao.html</link><description># FFmpeg 常用命令

FFmpeg 是一个强大的音视频处理工具。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/FFmpeg%20-chang-yong-ming-ling-can-kao.html</guid><pubDate>Wed, 12 Mar 2025 13:58:32 +0000</pubDate></item><item><title>yt-dlp 常用操作</title><link>https://bellisalpina.github.io/post/yt-dlp%20-chang-yong-cao-zuo.html</link><description># yt-dlp 常用操作

## 更新
```bash
# 更新到最新版本
yt-dlp -U
```

## 基础使用
```bash
# 下载视频（自动选择最佳质量）
yt-dlp &lt;URL&gt;

# 列出所有可用格式
yt-dlp -F &lt;URL&gt;
```

## 常用格式选择器

- `best`/`b`: 选择同时包含视频和音频的最佳质量格式
- `bestvideo`/`bv`: 选择最佳质量的纯视频格式
- `bestaudio`/`ba`: 选择最佳质量的纯音频格式
- `bestvideo*`/`bv*`: 选择包含视频的最佳质量格式（可能也包含音频）

## 格式选择技巧

### 合并音视频流
```bash
# 下载并合并最佳视频和音频（默认行为）
yt-dlp -f 'bv*+ba' &lt;URL&gt;

# 手动指定格式合并（格式号来自-F列表）
yt-dlp -f 137+140 &lt;URL&gt;
```

### 比较运算符
- 数值: `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, `=`, `!=`
- 字符串: `=`(等于), `^=`(开头是), `$=`(结尾是), `*=`(包含), `~=`(正则匹配)
- 前缀`!`表示否定

### 过滤条件
```bash
# 下载指定编码的视频（例如H.265优先，其次H.264）
yt-dlp -f 'bv*[vcodec^=hev1]+ba/bv*[vcodec^=avc1]+ba' &lt;URL&gt;

# 下载720p及以下的最佳视频
yt-dlp -f 'bv*[height&lt;=720]+ba/b[height&lt;=720]' &lt;URL&gt;

# 下载小于500MB的MP4文件
yt-dlp -f 'b[ext=mp4][filesize&lt;500M]' &lt;URL&gt;

# 下载最佳音频（m4a格式优先）
yt-dlp -f 'ba[ext=m4a]/ba' &lt;URL&gt;
```

## 特殊场景
```bash
# 需要cookie的网站
yt-dlp --cookies &lt;FILE&gt; &lt;URL&gt;

# 使用浏览器的cookie（以火狐为例）
yt-dlp --cookies-from-browser firefox &lt;URL&gt;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/yt-dlp%20-chang-yong-cao-zuo.html</guid><pubDate>Wed, 12 Mar 2025 12:10:34 +0000</pubDate></item><item><title>AList 静默运行脚本</title><link>https://bellisalpina.github.io/post/AList%20-jing-mo-yun-xing-jiao-ben.html</link><description># AList 静默运行脚本

本文档介绍了两种实现 AList 程序在 Windows 系统下静默运行（即不显示控制台窗口）的方法。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/AList%20-jing-mo-yun-xing-jiao-ben.html</guid><pubDate>Sun, 15 Dec 2024 02:31:56 +0000</pubDate></item><item><title>Arch Linux 安装 KDE Plasma 桌面环境</title><link>https://bellisalpina.github.io/post/Arch%20Linux%20-an-zhuang-%20KDE%20Plasma%20-zhuo-mian-huan-jing.html</link><description># Arch Linux 安装 KDE Plasma 桌面环境&#13;
&#13;
本文介绍 Arch Linux 安装 KDE Plasma 桌面环境的过程&#13;
&#13;
## 1. 创建一个非 root 用户&#13;
&#13;
使用`useradd`命令创建一个新用户，并将其添加到`wheel`组，以便能够使用`sudo`提升权限&#13;
```&#13;
useradd -m -G wheel -s /bin/bash myarch&#13;
```&#13;
这里的`myarch`是希望创建的用户名&#13;
&#13;
## 2. 设置用户密码&#13;
&#13;
使用`passwd`命令为新用户设置密码：&#13;
```&#13;
passwd myarch&#13;
```&#13;
## 3. 配置 sudo 权限&#13;
&#13;
使用`visudo`命令编辑`/etc/sudoers`文件，以允许`wheel`组的用户使用`sudo`&#13;
&#13;
```&#13;
visudo&#13;
```&#13;
`visudo`会打开默认的编辑器编辑`/etc/sudoers`文件&#13;
&#13;
可以通过设置环境变量来选择其他编辑器，例如`nano`：&#13;
```&#13;
export EDITOR=nano&#13;
visudo&#13;
```&#13;
不建议直接使用文本编辑器编辑`/etc/sudoers`文件，可能会导致配置错误  &#13;
`visudo`会在保存时自动检查语法，如果有错误，系统会警告并拒绝保存更改&#13;
&#13;
找到以下行并去掉前面的注释符号，这将允许`wheel`组的用户使用`sudo`命令：&#13;
```&#13;
#%wheel ALL=(ALL:ALL) ALL&#13;
```&#13;
完成编辑后，保存并退出编辑器&#13;
&#13;
## 4. 安装 KDE Plasma&#13;
&#13;
安装 plasma 元软件包、konsole 终端以及 dolphin 文件管理器&#13;
```&#13;
pacman -S plasma-meta konsole dolphin&#13;
```&#13;
&#13;
## 5. 安装 sddm 图形登录管理器&#13;
&#13;
使用以下命令安装`sddm`图形登录管理器：&#13;
```&#13;
pacman -S sddm&#13;
```&#13;
启用并立即启动`sddm`：&#13;
```&#13;
systemctl enable --now sddm&#13;
```&#13;
至此已经能看到图形化的登录界面了。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Arch%20Linux%20-an-zhuang-%20KDE%20Plasma%20-zhuo-mian-huan-jing.html</guid><pubDate>Sun, 27 Oct 2024 11:28:42 +0000</pubDate></item><item><title>添加 Arch Linux CN 软件源并安装 yay 以管理 AUR 软件包</title><link>https://bellisalpina.github.io/post/tian-jia-%20Arch%20Linux%20CN%20-ruan-jian-yuan-bing-an-zhuang-%20yay%20-yi-guan-li-%20AUR%20-ruan-jian-bao.html</link><description># 添加 Arch Linux CN 软件源并安装 yay 以管理 AUR 软件包&#13;
&#13;
## 1. 添加 Arch Linux CN 源&#13;
&#13;
编辑`/etc/pacman.conf`，在末尾添加两行：&#13;
```&#13;
[archlinuxcn]&#13;
Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch&#13;
```&#13;
&#13;
## 2. 信任 GPG 密钥&#13;
&#13;
安装`archlinuxcn-keyring`前需要信任`farseerfc`的 GPG 密钥，否则可能会安装失败，使用以下命令在本地信任`farseerfc`的 GPG 密钥：&#13;
```&#13;
pacman-key --lsign-key 'farseerfc@archlinux.org'&#13;
```&#13;
&#13;
## 3. 安装 ArchLinuxCN Keyring&#13;
&#13;
安装`archlinuxcn-keyring`包以导入 GPG 密钥&#13;
```&#13;
pacman -Sy archlinuxcn-keyring&#13;
```&#13;
&#13;
## 4. 更新软件包数据库&#13;
&#13;
配置完源后，使用以下命令更新软件包数据库：&#13;
```&#13;
pacman -Syy&#13;
```&#13;
&#13;
## 5. 安装 yay&#13;
&#13;
使用以下命令安装 yay：&#13;
```&#13;
pacman -S yay&#13;
```&#13;
至此，已成功添加 ArchLinuxCN 源并安装了 yay，可以开始使用 yay 来管理 AUR 软件包了。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/tian-jia-%20Arch%20Linux%20CN%20-ruan-jian-yuan-bing-an-zhuang-%20yay%20-yi-guan-li-%20AUR%20-ruan-jian-bao.html</guid><pubDate>Sun, 27 Oct 2024 09:46:20 +0000</pubDate></item><item><title>Arch Linux 基础安装</title><link>https://bellisalpina.github.io/post/Arch%20Linux%20-ji-chu-an-zhuang.html</link><description># Arch Linux 基础安装

本指南从已启动的 Arch Live 环境开始。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Arch%20Linux%20-ji-chu-an-zhuang.html</guid><pubDate>Sun, 27 Oct 2024 08:47:52 +0000</pubDate></item><item><title>Windows 11 恢复旧版右键菜单</title><link>https://bellisalpina.github.io/post/Windows%2011%20-hui-fu-jiu-ban-you-jian-cai-dan.html</link><description># Windows 11 恢复旧版右键菜单

本文将介绍如何通过修改注册表，在 Windows 11 中恢复经典的旧版右键菜单。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Windows%2011%20-hui-fu-jiu-ban-you-jian-cai-dan.html</guid><pubDate>Wed, 23 Oct 2024 15:39:39 +0000</pubDate></item><item><title>使用官方脚本一键安装Docker</title><link>https://bellisalpina.github.io/post/shi-yong-guan-fang-jiao-ben-yi-jian-an-zhuang-Docker.html</link><description>Docker在&lt;https://get.docker.com&gt;提供了一个便捷脚本，用于将 Docker 非交互式地安装到开发环境中，不建议在生产环境中使用该便捷脚本，该脚本是开源的，可以在GitHub上的[docker-install](https://github.com/docker/docker-install)仓库中找到它&#13;
&#13;
脚本运行过程中使用阿里云的镜像安装：&#13;
```&#13;
curl -fsSL https://get.docker.com -o get-docker.sh&#13;
sh ./get-docker.sh --mirror Aliyun&#13;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/shi-yong-guan-fang-jiao-ben-yi-jian-an-zhuang-Docker.html</guid><pubDate>Fri, 11 Oct 2024 11:32:00 +0000</pubDate></item><item><title>Linux 终端临时配置代理</title><link>https://bellisalpina.github.io/post/Linux%20-zhong-duan-lin-shi-pei-zhi-dai-li.html</link><description># Linux 终端临时配置代理

在 Linux 终端中，可以通过设置环境变量来快速配置临时的网络代理。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Linux%20-zhong-duan-lin-shi-pei-zhi-dai-li.html</guid><pubDate>Fri, 11 Oct 2024 01:01:43 +0000</pubDate></item><item><title>Debian 12 替换为 USTC 源</title><link>https://bellisalpina.github.io/post/Debian%2012%20-ti-huan-wei-%20USTC%20-yuan.html</link><description># Debian 12 替换为 USTC 源

为了提升软件包下载速度，可以将 Debian 12 的默认软件源替换为中科大（USTC）的镜像源。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Debian%2012%20-ti-huan-wei-%20USTC%20-yuan.html</guid><pubDate>Wed, 09 Oct 2024 12:38:51 +0000</pubDate></item><item><title>SSH 通过密钥登录服务器</title><link>https://bellisalpina.github.io/post/SSH%20-tong-guo-mi-yao-deng-lu-fu-wu-qi.html</link><description># SSH 通过密钥登录服务器

要通过 SSH 密钥登录服务器，需要先生成一对密钥（公钥和私钥），然后将公钥部署到服务器上。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/SSH%20-tong-guo-mi-yao-deng-lu-fu-wu-qi.html</guid><pubDate>Wed, 09 Oct 2024 05:13:10 +0000</pubDate></item><item><title>Ubuntu 启用 BBR</title><link>https://bellisalpina.github.io/post/Ubuntu%20-qi-yong-%20BBR.html</link><description># Ubuntu 启用 BBR

BBR（Bottleneck Bandwidth and RTT）是 Google 开发的一种 TCP 拥塞控制算法，可以有效提升网络吞吐量和降低延迟。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Ubuntu%20-qi-yong-%20BBR.html</guid><pubDate>Wed, 09 Oct 2024 04:44:48 +0000</pubDate></item><item><title>给 Java 程序挂代理</title><link>https://bellisalpina.github.io/post/gei-%20Java%20-cheng-xu-gua-dai-li.html</link><description># 🚀 给 Java 程序挂代理

在开发或运行 Java 应用时，有时需要通过网络代理访问外部资源。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/gei-%20Java%20-cheng-xu-gua-dai-li.html</guid><pubDate>Wed, 09 Oct 2024 03:14:12 +0000</pubDate></item><item><title>TeamSpeak3教程</title><link>https://bellisalpina.github.io/post/TeamSpeak3-jiao-cheng.html</link><description># 一.安装教程&#13;
&#13;
![](https://s2.loli.net/2024/03/31/AOvqCJLnHarwKxm.png)&#13;
&#13;
⬇️**用户协议，拉到底才能勾选同意协议**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/3O7Unc6FafBkvKP.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/uwt6WgMcvZoh3ps.png)&#13;
&#13;
⬇️**安装路径，点击 Browse 并选择路径**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/uBdPyASjgQtiw3N.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/qYSAUDxBwKrXF6n.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/6Q8Zw4hYrCvt1pW.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/ngjNQH1EdPAswoB.png)&#13;
&#13;
&#13;
⬇️**第一次打开会弹出用户协议，拉到底然后同意**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/FypmXrhzclOwo7J.png)&#13;
&#13;
&#13;
&#13;
## ◾汉化教程&#13;
&#13;
**软件处于打开状态，然后双击打开汉化文件**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/mUNIPQX4fiHt75g.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/ZIaMNHWoOTFwlzB.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/k26DAMoCfi3GLsB.png)&#13;
&#13;
**手动关闭软件再打开，可以看到汉化成功了**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/AnfLwpXc8sZ2H97.png)&#13;
&#13;
&#13;
&#13;
---&#13;
&#13;
&#13;
&#13;
# 二.连接服务器&#13;
&#13;
![](https://s2.loli.net/2024/03/31/lbqjKsLdSVOXp12.png)&#13;
&#13;
⬇️**输入服务器地址，并给自己取个昵称**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/xB8r4Zoqub12mna.png)&#13;
&#13;
&#13;
&#13;
## ◾添加书签&#13;
&#13;
**把服务器添加到书签，方便以后连接**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/tW4YikfPMKSbFQI.png)&#13;
&#13;
&#13;
&#13;
---&#13;
&#13;
&#13;
&#13;
# 三.设置按键通话&#13;
&#13;
![](https://s2.loli.net/2024/03/31/oMbJlWGViXaORNt.png)&#13;
&#13;
⬇️**选择按键通话，并设置一个快捷键，下方“数字信号处理”的选项按自己需求开或关**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/lLD3qC6YXWGpyJu.png)&#13;
&#13;
**然后点 OK 保存设置**  &#13;
。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/TeamSpeak3-jiao-cheng.html</guid><pubDate>Wed, 09 Oct 2024 03:04:27 +0000</pubDate></item><item><title>Git 代理设置指南</title><link>https://bellisalpina.github.io/post/Git%20-dai-li-she-zhi-zhi-nan.html</link><description># Git 代理设置指南
&gt; 本文以 **Clash** 为例，介绍如何为 Git 配置网络代理。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Git%20-dai-li-she-zhi-zhi-nan.html</guid><pubDate>Wed, 09 Oct 2024 02:57:34 +0000</pubDate></item><item><title>WireGuard 搭建虚拟个人网络</title><link>https://bellisalpina.github.io/post/WireGuard%20-da-jian-xu-ni-ge-ren-wang-luo.html</link><description># WireGuard 搭建虚拟个人网络

## 1. 安装 WireGuard

```bash
# 安装 WireGuard
apt install -y wireguard

# 开启流量转发
echo 'net.ipv4.ip_forward = 1' | tee -a /etc/sysctl.conf
sysctl -p
```

## 2. 配置目录权限

```bash
# 进入配置存储路径，调整目录权限
chmod 700 /etc/wireguard
cd /etc/wireguard
```

## 3. 生成密钥对

### 3.1 生成服务器密钥对

```bash
wg genkey | tee server.key | wg pubkey &gt; server.key.pub
```

### 3.2 生成客户端密钥对

```bash
# 生成 client1 公钥私钥
wg genkey | tee client1.key | wg pubkey &gt; client1.key.pub
```

## 4. 创建服务器配置文件

```bash
echo '
[Interface]
PrivateKey = $(cat server.key)
Address = 10.0.0.1/24
ListenPort = 51820

PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
# 注意：eth0 需要为本机物理网卡名称

[Peer]
PublicKey = $(cat client1.key.pub)
AllowedIPs = 10.0.0.2/32' &gt; wg0.conf
```

## 5. 添加更多客户端

```bash
# 生成 client2 公钥私钥
wg genkey | tee client2.key | wg pubkey &gt; client2.key.pub

# 追加到 wg0.conf 配置
echo '
[Peer]
PublicKey = $(cat client2.key.pub)
AllowedIPs = 10.0.0.3/32' &gt;&gt; wg0.conf
```

## 6. 启动和管理 WireGuard 服务

### 6.1 设置服务自启

```bash
systemctl enable wg-quick@wg0.service
```

### 6.2 启动/关闭服务

```bash
# 启动 wg0
wg-quick up wg0

# 关闭 wg0
wg-quick down wg0
```

## 7. 创建客户端配置文件

```bash
echo '
[Interface]
PrivateKey = $(cat client1.key)
Address = 10.0.0.2/24
DNS = 119.29.29.29

[Peer]
PublicKey = $(cat server.key.pub)
AllowedIPs = 10.0.0.0/24
Endpoint = 公网IP:51820
PersistentKeepalive = 30' &gt; client1.conf
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/WireGuard%20-da-jian-xu-ni-ge-ren-wang-luo.html</guid><pubDate>Wed, 09 Oct 2024 02:38:46 +0000</pubDate></item><item><title>使用 curl 正确下载 GitHub 文件</title><link>https://bellisalpina.github.io/post/shi-yong-%20curl%20-zheng-que-xia-zai-%20GitHub%20-wen-jian.html</link><description># 使用 curl 正确下载 GitHub 文件

使用 `curl` 下载文件并保留其原始名称，最简单的语法是：
```bash
curl -O URL
```
这条命令在多数情况下都很好用。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/shi-yong-%20curl%20-zheng-que-xia-zai-%20GitHub%20-wen-jian.html</guid><pubDate>Wed, 09 Oct 2024 00:53:53 +0000</pubDate></item></channel></rss>