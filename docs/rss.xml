<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Bellisalpina</title><link>https://bellisalpina.github.io</link><description>Meet me in the afterglow</description><copyright>Bellisalpina</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://s2.loli.net/2024/10/09/nZ3z81Mu4OIFshE.jpg</url><title>avatar</title><link>https://bellisalpina.github.io</link></image><lastBuildDate>Fri, 11 Oct 2024 01:02:13 +0000</lastBuildDate><managingEditor>Bellisalpina</managingEditor><ttl>60</ttl><webMaster>Bellisalpina</webMaster><item><title>Linux终端临时配置代理</title><link>https://bellisalpina.github.io/post/Linux-zhong-duan-lin-shi-pei-zhi-dai-li.html</link><description># Linux终端临时配置代理&#13;
&#13;
在Linux中，给当前终端临时配置代理可以通过设置环境变量来实现。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Linux-zhong-duan-lin-shi-pei-zhi-dai-li.html</guid><pubDate>Fri, 11 Oct 2024 01:01:43 +0000</pubDate></item><item><title>Debian12替换为USTC源</title><link>https://bellisalpina.github.io/post/Debian12-ti-huan-wei-USTC-yuan.html</link><description># Debian12替换为USTC源  &#13;
&#13;
```&#13;
echo '# 默认注释了源码仓库，如有需要可自行取消注释&#13;
deb http://mirrors.ustc.edu.cn/debian bookworm main contrib non-free non-free-firmware&#13;
# deb-src http://mirrors.ustc.edu.cn/debian bookworm main contrib non-free non-free-firmware&#13;
deb http://mirrors.ustc.edu.cn/debian bookworm-updates main contrib non-free non-free-firmware&#13;
# deb-src http://mirrors.ustc.edu.cn/debian bookworm-updates main contrib non-free non-free-firmware&#13;
&#13;
# backports 软件源，请按需启用&#13;
deb http://mirrors.ustc.edu.cn/debian bookworm-backports main contrib non-free non-free-firmware&#13;
# deb-src http://mirrors.ustc.edu.cn/debian bookworm-backports main contrib non-free non-free-firmware&#13;
&#13;
deb http://mirrors.ustc.edu.cn/debian-security/ bookworm-security main contrib non-free non-free-firmware&#13;
# deb-src http://mirrors.ustc.edu.cn/debian-security/ bookworm-security main contrib non-free non-free-firmware' | tee /etc/apt/sources.list&#13;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Debian12-ti-huan-wei-USTC-yuan.html</guid><pubDate>Wed, 09 Oct 2024 12:38:51 +0000</pubDate></item><item><title>SSH通过密钥登录服务器</title><link>https://bellisalpina.github.io/post/SSH-tong-guo-mi-yao-deng-lu-fu-wu-qi.html</link><description># SSH通过密钥登录服务器  &#13;
&#13;
要通过SSH密钥登录到服务器，需要生成一对密钥(公钥和私钥)，并将公钥放置在服务器上  &#13;
&#13;
### 1. 生成密钥对&#13;
使用以下命令生成一对SSH密钥：&#13;
```&#13;
ssh-keygen -t rsa&#13;
```&#13;
- 按照提示，可以选择密钥保存的位置和设置一个密钥锁码，也可以留空以实现无密码登录&#13;
&#13;
### 2. 添加公钥到服务器&#13;
1. 登录到服务器&#13;
2. 创建 `.ssh` 目录(如果尚不存在)&#13;
   ```&#13;
   mkdir -p ~/.ssh&#13;
   ```&#13;
3. 将公钥内容添加到 `authorized_keys` 文件中：&#13;
   ```&#13;
   cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys&#13;
   ```&#13;
4. 设置正确的权限：&#13;
   ```&#13;
   chmod 600 ~/.ssh/authorized_keys&#13;
   chmod 700 ~/.ssh&#13;
   ```&#13;
&#13;
### 3. 配置SSH服务&#13;
确保SSH服务允许使用密钥登录，编辑SSH配置文件 `/etc/ssh/sshd_config`，确保以下选项被设置为 `yes`：&#13;
```&#13;
PubkeyAuthentication yes&#13;
```&#13;
如果希望禁用密码登录，可以设置：&#13;
```&#13;
PasswordAuthentication no&#13;
```&#13;
完成后，重启SSH服务：&#13;
```&#13;
sudo service sshd restart&#13;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/SSH-tong-guo-mi-yao-deng-lu-fu-wu-qi.html</guid><pubDate>Wed, 09 Oct 2024 05:13:10 +0000</pubDate></item><item><title>Ubuntu启用BBR</title><link>https://bellisalpina.github.io/post/Ubuntu-qi-yong-BBR.html</link><description># Ubuntu启用BBR&#13;
&#13;
### 1. 检查内核版本&#13;
确保系统内核版本为4.9或更高，通过以下命令检查内核版本：&#13;
```&#13;
uname -r&#13;
```&#13;
### 2. 修改系统配置&#13;
修改`sysctl.conf`以启用BBR，执行以下命令将配置添加到`/etc/sysctl.conf`文件中：&#13;
```&#13;
echo 'net.core.default_qdisc=fq' | tee -a /etc/sysctl.conf&#13;
echo 'net.ipv4.tcp_congestion_control=bbr' | tee -a /etc/sysctl.conf&#13;
```&#13;
- 第一条命令设置默认队列规则为`fq`(Fair Queueing)&#13;
- 第二条命令将TCP拥塞控制算法设置为BBR&#13;
&#13;
### 3. 应用更改&#13;
修改完成后，重新加载sysctl配置以使更改生效，运行以下命令：&#13;
```&#13;
sysctl -p&#13;
```&#13;
&#13;
### 4. 验证BBR是否启用&#13;
要确认BBR是否成功启用，可以使用以下命令检查当前的拥塞控制算法：&#13;
```bash&#13;
sysctl net.ipv4.tcp_congestion_control&#13;
```&#13;
输出应该显示：&#13;
```&#13;
net.ipv4.tcp_congestion_control = bbr&#13;
```&#13;
这表明BBR已成功启用&#13;
&#13;
### 5. 检查BBR模块&#13;
虽然BBR是内核自带的，不需要作为独立模块加载，但可以使用以下命令确认BBR模块是否已加载：&#13;
```&#13;
lsmod | grep bbr&#13;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Ubuntu-qi-yong-BBR.html</guid><pubDate>Wed, 09 Oct 2024 04:44:48 +0000</pubDate></item><item><title>给java程序挂代理</title><link>https://bellisalpina.github.io/post/gei-java-cheng-xu-gua-dai-li.html</link><description># 给java程序挂代理&#13;
&#13;
+ **命令行挂Socks5代理**&#13;
&#13;
启动Socks5代理命令如下&#13;
```&#13;
java -DsocksProxyHost=127.0.0.1 -DsocksProxyPort=7890 -jar xxxxx.jar&#13;
```&#13;
`socksProxyHost`是主机，`socksProxyPort`是端口号&#13;
&#13;
* * * * *&#13;
+ **命令行挂HTTP代理**&#13;
&#13;
如果想对一个Java程序设置HTTP代理，按如下所示设置&#13;
```&#13;
java -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=7890 -Dhttps.proxyHost=127.0.0.1 -Dhttps.proxyPort=7890 -jar xxxxx.jar&#13;
```&#13;
`http.proxyHost` 和`http.proxyPort`用于设置HTTP代理&#13;
&#13;
`https.proxyHost`和 `https.proxyPort`用于设置HTTPS代理&#13;
&#13;
* * * * *&#13;
+ **使用系统代理**&#13;
```&#13;
java -Djava.net.useSystemProxies=true -jar xxxxx.jar&#13;
```&#13;
那么 xxxxx.jar 程序将会走系统代理&#13;
。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/gei-java-cheng-xu-gua-dai-li.html</guid><pubDate>Wed, 09 Oct 2024 03:14:12 +0000</pubDate></item><item><title>TeamSpeak3教程</title><link>https://bellisalpina.github.io/post/TeamSpeak3-jiao-cheng.html</link><description># 一.安装教程&#13;
&#13;
![](https://s2.loli.net/2024/03/31/AOvqCJLnHarwKxm.png)&#13;
&#13;
⬇️**用户协议，拉到底才能勾选同意协议**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/3O7Unc6FafBkvKP.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/uwt6WgMcvZoh3ps.png)&#13;
&#13;
⬇️**安装路径，点击 Browse 并选择路径**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/uBdPyASjgQtiw3N.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/qYSAUDxBwKrXF6n.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/6Q8Zw4hYrCvt1pW.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/ngjNQH1EdPAswoB.png)&#13;
&#13;
&#13;
⬇️**第一次打开会弹出用户协议，拉到底然后同意**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/FypmXrhzclOwo7J.png)&#13;
&#13;
&#13;
&#13;
## ◾汉化教程&#13;
&#13;
**软件处于打开状态，然后双击打开汉化文件**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/mUNIPQX4fiHt75g.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/ZIaMNHWoOTFwlzB.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/k26DAMoCfi3GLsB.png)&#13;
&#13;
**手动关闭软件再打开，可以看到汉化成功了**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/AnfLwpXc8sZ2H97.png)&#13;
&#13;
&#13;
&#13;
---&#13;
&#13;
&#13;
&#13;
# 二.连接服务器&#13;
&#13;
![](https://s2.loli.net/2024/03/31/lbqjKsLdSVOXp12.png)&#13;
&#13;
⬇️**输入服务器地址，并给自己取个昵称**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/xB8r4Zoqub12mna.png)&#13;
&#13;
&#13;
&#13;
## ◾添加书签&#13;
&#13;
**把服务器添加到书签，方便以后连接**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/tW4YikfPMKSbFQI.png)&#13;
&#13;
&#13;
&#13;
---&#13;
&#13;
&#13;
&#13;
# 三.设置按键通话&#13;
&#13;
![](https://s2.loli.net/2024/03/31/oMbJlWGViXaORNt.png)&#13;
&#13;
⬇️**选择按键通话，并设置一个快捷键，下方“数字信号处理”的选项按自己需求开或关**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/lLD3qC6YXWGpyJu.png)&#13;
&#13;
**然后点 OK 保存设置**  &#13;
。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/TeamSpeak3-jiao-cheng.html</guid><pubDate>Wed, 09 Oct 2024 03:04:27 +0000</pubDate></item><item><title>为Git设置代理</title><link>https://bellisalpina.github.io/post/wei-Git-she-zhi-dai-li.html</link><description># 为Git设置代理&#13;
&#13;
&gt; 以**Clash**为例  &#13;
&#13;
## HTTP/HTTPS协议  &#13;
使用 HTTP / HTTPS 传输协议连接到 Git 仓库的 URL 实例如下：  &#13;
```&#13;
http://github.com/example/example.git&#13;
https://github.com/example/example.git&#13;
```&#13;
 &#13;
+ 全局代理  &#13;
```&#13;
git config --global http.proxy http://127.0.0.1:7890&#13;
```&#13;
+ 只代理Github  &#13;
```&#13;
git config --global http.https://github.com.proxy http://127.0.0.1:7890&#13;
```&#13;
+ 撤销全局代理  &#13;
```&#13;
git config --global --unset http.proxy&#13;
```&#13;
+ 撤销代理GitHub&#13;
```&#13;
git config --global --unset http.https://github.com.proxy&#13;
```&#13;
&#13;
&#13;
## SSH协议  &#13;
使用 SSH 传输协议连接到 Git 仓库的 URL 实例如下：&#13;
```&#13;
git@github.com:example/example.git&#13;
ssh://git@github.com/example/example.git&#13;
```&#13;
&#13;
以下内容仅限**Windows**端Git  &#13;
+ 编辑`C:\Users\example\.ssh\config`，输入以下内容：  &#13;
```&#13;
Host github.com&#13;
    User git&#13;
    ProxyCommand connect -H 127.0.0.1:7890 %h %p&#13;
```&#13;
+ 撤销代理：删除添加的内容。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/wei-Git-she-zhi-dai-li.html</guid><pubDate>Wed, 09 Oct 2024 02:57:34 +0000</pubDate></item><item><title>WireGuard搭建虚拟个人网络</title><link>https://bellisalpina.github.io/post/WireGuard-da-jian-xu-ni-ge-ren-wang-luo.html</link><description># WireGuard搭建虚拟个人网络&#13;
&#13;
### 安装WireGuard&#13;
```&#13;
# 安装wireguard&#13;
apt install wireguard-tools -y&#13;
&#13;
# 开启流量转发&#13;
echo 'net.ipv4.ip_forward = 1' | tee -a /etc/sysctl.conf&#13;
echo 'net.ipv6.conf.all.forwarding = 1' | tee -a /etc/sysctl.conf&#13;
sysctl -p /etc/sysctl.conf&#13;
```&#13;
&#13;
### 进入配置存储路径，调整目录权限&#13;
```&#13;
chmod 0777 /etc/wireguard&#13;
cd /etc/wireguard&#13;
```&#13;
&#13;
### 生成公钥私钥&#13;
```&#13;
wg genkey | tee server.key | wg pubkey &gt; server.key.pub&#13;
```&#13;
&#13;
### 生成client1公钥私钥&#13;
```&#13;
wg genkey | tee client1.key | wg pubkey &gt; client1.key.pub&#13;
```&#13;
&#13;
### 创建服务器配置文件&#13;
```&#13;
echo '&#13;
[Interface]&#13;
PrivateKey = $(cat server.key)&#13;
Address = 10.0.0.1/24&#13;
ListenPort = 50820&#13;
DNS = 119.29.29.29&#13;
&#13;
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&#13;
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE&#13;
#注意eth0需要为本机网卡名称&#13;
&#13;
[Peer]&#13;
PublicKey = $(cat client1.key.pub)&#13;
AllowedIPs = 10.0.0.2/32' &gt; wg0.conf&#13;
```&#13;
&#13;
### 增加client2&#13;
```&#13;
# 生成公钥私钥&#13;
wg genkey | tee client2.key | wg pubkey &gt; client2.key.pub&#13;
&#13;
# 追加到wg0.conf配置&#13;
echo '&#13;
[Peer]&#13;
PublicKey =  $(cat client2.key.pub)&#13;
AllowedIPs = 10.0.0.3/32' &gt;&gt; wg0.conf&#13;
```&#13;
&#13;
### 设置WireGuard服务自启&#13;
```&#13;
systemctl enable wg-quick@wg0&#13;
```&#13;
&#13;
### 启动WireGuard&#13;
```&#13;
# 启动wg0&#13;
wg-quick up wg0&#13;
# 关闭wg0&#13;
wg-quick down wg0&#13;
```&#13;
&#13;
### 创建client1配置&#13;
```&#13;
echo '&#13;
[Interface]&#13;
PrivateKey = $(cat client1.key)&#13;
Address = 10.0.0.2/24&#13;
DNS = 119.29.29.29&#13;
&#13;
[Peer]&#13;
PublicKey = $(cat server.key.pub)&#13;
AllowedIPs = 10.0.0.0/24&#13;
Endpoint = 公网IP:50820&#13;
PersistentKeepalive = 30' &gt; client1.conf&#13;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/WireGuard-da-jian-xu-ni-ge-ren-wang-luo.html</guid><pubDate>Wed, 09 Oct 2024 02:38:46 +0000</pubDate></item><item><title>如何在GitHub正确地使用curl下载文件？</title><link>https://bellisalpina.github.io/post/ru-he-zai-GitHub-zheng-que-di-shi-yong-curl-xia-zai-wen-jian-%EF%BC%9F.html</link><description># 如何在GitHub正确地使用curl下载文件？  &#13;
&#13;
下载与原始文件同名的文件的常用语法非常简单：&#13;
&#13;
```&#13;
curl -O URL&#13;
```&#13;
&#13;
这在大多数情况下都有效，但是，有时从 GitHub 或 SourceForge 下载文件时，它不会获取正确的文件  &#13;
&#13;
## **使用 curl 正确下载存档文件**  &#13;
&#13;
这里的问题是 URL 重定向到实际的存档文件，为此，需要使用其他选项  &#13;
&#13;
```&#13;
curl -JLO URL&#13;
```&#13;
&#13;
选项可以按任何顺序排列  &#13;
&#13;
这是基于 curl 命令手册页的选项的快速说明：  &#13;
&#13;
- J：此选项告诉 -O, --remote-name 选项使用服务器指定的 Content-Disposition 文件名，而不是从 URL 中提取文件名  &#13;
- L：如果服务器报告请求的页面已移动到不同的位置（用 Location: 标头和 3XX 响应代码指示），此选项将使 curl 在新位置重做请求  &#13;
- O：使用此选项，无需指定下载的输出文件名  。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/ru-he-zai-GitHub-zheng-que-di-shi-yong-curl-xia-zai-wen-jian-%EF%BC%9F.html</guid><pubDate>Wed, 09 Oct 2024 00:53:53 +0000</pubDate></item></channel></rss>