<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Bellisalpina</title><link>https://bellisalpina.github.io</link><description>Meet me in the afterglow</description><copyright>Bellisalpina</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://s2.loli.net/2024/10/09/nZ3z81Mu4OIFshE.jpg</url><title>avatar</title><link>https://bellisalpina.github.io</link></image><lastBuildDate>Wed, 15 Oct 2025 04:51:46 +0000</lastBuildDate><managingEditor>Bellisalpina</managingEditor><ttl>60</ttl><webMaster>Bellisalpina</webMaster><item><title>使用Windows PowerShell放行防火墙端口</title><link>https://bellisalpina.github.io/post/shi-yong-Windows%20PowerShell-fang-xing-fang-huo-qiang-duan-kou.html</link><description># 使用Windows PowerShell放行防火墙端口

### ⚠️ 重要前提：以管理员身份运行 PowerShell
所有修改防火墙规则的命令都需要管理员权限。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/shi-yong-Windows%20PowerShell-fang-xing-fang-huo-qiang-duan-kou.html</guid><pubDate>Wed, 15 Oct 2025 04:51:13 +0000</pubDate></item><item><title>解决53端口被systemd-resolved占用</title><link>https://bellisalpina.github.io/post/jie-jue-53-duan-kou-bei-systemd-resolved-zhan-yong.html</link><description># 解决53端口被systemd-resolved占用

### 1. 先临时停用systemd-resolved服务
```bash
systemctl stop systemd-resolved
```

### 2. 编辑`/etc/systemd/resolved.conf`
```bash
nano -w /etc/systemd/resolved.conf
```

### 3. 修改并保存
```conf
[Resolve]
DNS=119.29.29.29  #取消注释
...
DNSStubListener=no  #取消注释，把yes改为no
```

### 4. 链接
```bash
ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/jie-jue-53-duan-kou-bei-systemd-resolved-zhan-yong.html</guid><pubDate>Sat, 11 Oct 2025 03:26:42 +0000</pubDate></item><item><title>使用OpenSSL为私网IP生成自签名证书</title><link>https://bellisalpina.github.io/post/shi-yong-OpenSSL-wei-si-wang-IP-sheng-cheng-zi-qian-ming-zheng-shu.html</link><description># 使用OpenSSL为私网IP生成自签名证书

以下是使用OpenSSL为192.168.0.1和172.16.0.1生成自签名证书的步骤：

## 步骤1：创建配置文件

首先创建一个OpenSSL配置文件，命名为`san.cnf`，包含Subject Alternative Name (SAN)扩展：

```
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = CN
ST = Beijing
L = Beijing
O = Company
OU = Department
CN = Internal

[v3_req]
keyUsage = keyEncipherment, digitalSignature
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
IP.1 = 192.168.0.1
IP.2 = 172.16.0.1
DNS.1 = localhost
```

## 步骤2：生成私钥

```bash
openssl genrsa -out server.key 2048
```

## 步骤3：生成证书签名请求(CSR)

使用配置文件生成CSR：

```bash
openssl req -new -key server.key -out server.csr -config san.cnf
```

## 步骤4：生成自签名证书

使用私钥和CSR生成自签名证书：

```bash
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt -extfile san.cnf -extensions v3_req
```

## 步骤5：验证证书

验证证书是否包含了正确的IP地址：

```bash
openssl x509 -in server.crt -text -noout
```

在输出中查找**Subject Alternative Name**部分，确认其中包含了两个IP地址：192.168.0.1和172.16.0.1。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/shi-yong-OpenSSL-wei-si-wang-IP-sheng-cheng-zi-qian-ming-zheng-shu.html</guid><pubDate>Mon, 06 Oct 2025 14:21:02 +0000</pubDate></item><item><title>FFmpeg 常用命令参考</title><link>https://bellisalpina.github.io/post/FFmpeg%20-chang-yong-ming-ling-can-kao.html</link><description># FFmpeg 常用命令

FFmpeg 是一个强大的音视频处理工具。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/FFmpeg%20-chang-yong-ming-ling-can-kao.html</guid><pubDate>Wed, 12 Mar 2025 13:58:32 +0000</pubDate></item><item><title>yt-dlp 常用操作</title><link>https://bellisalpina.github.io/post/yt-dlp%20-chang-yong-cao-zuo.html</link><description># yt-dlp 常用操作

## 更新
```bash
# 更新到最新版本
yt-dlp -U
```

## 基础使用
```bash
# 下载视频（自动选择最佳质量）
yt-dlp &lt;URL&gt;

# 列出所有可用格式
yt-dlp -F &lt;URL&gt;
```

## 常用格式选择器

- `best`/`b`: 选择同时包含视频和音频的最佳质量格式
- `bestvideo`/`bv`: 选择最佳质量的纯视频格式
- `bestaudio`/`ba`: 选择最佳质量的纯音频格式
- `bestvideo*`/`bv*`: 选择包含视频的最佳质量格式（可能也包含音频）

## 格式选择技巧

### 合并音视频流
```bash
# 下载并合并最佳视频和音频（默认行为）
yt-dlp -f 'bv*+ba' &lt;URL&gt;

# 手动指定格式合并（格式号来自-F列表）
yt-dlp -f 137+140 &lt;URL&gt;
```

### 比较运算符
- 数值: `&lt;`, `&lt;=`, `&gt;`, `&gt;=`, `=`, `!=`
- 字符串: `=`(等于), `^=`(开头是), `$=`(结尾是), `*=`(包含), `~=`(正则匹配)
- 前缀`!`表示否定

### 过滤条件
```bash
# 下载指定编码的视频（例如H.265优先，其次H.264）
yt-dlp -f 'bv*[vcodec^=hev1]+ba/bv*[vcodec^=avc1]+ba' &lt;URL&gt;

# 下载720p及以下的最佳视频
yt-dlp -f 'bv*[height&lt;=720]+ba/b[height&lt;=720]' &lt;URL&gt;

# 下载小于500MB的MP4文件
yt-dlp -f 'b[ext=mp4][filesize&lt;500M]' &lt;URL&gt;

# 下载最佳音频（m4a格式优先）
yt-dlp -f 'ba[ext=m4a]/ba' &lt;URL&gt;
```

## 特殊场景
```bash
# 需要cookie的网站
yt-dlp --cookies &lt;FILE&gt; &lt;URL&gt;

# 使用浏览器的cookie（以火狐为例）
yt-dlp --cookies-from-browser firefox &lt;URL&gt;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/yt-dlp%20-chang-yong-cao-zuo.html</guid><pubDate>Wed, 12 Mar 2025 12:10:34 +0000</pubDate></item><item><title>AList 静默运行脚本</title><link>https://bellisalpina.github.io/post/AList%20-jing-mo-yun-xing-jiao-ben.html</link><description># AList 静默运行脚本&#13;
&#13;
使用以下 VBScript 代码可实现 AList 静默运行：&#13;
&#13;
```vbscript&#13;
Dim ws&#13;
Set ws = WScript.CreateObject('WScript.Shell')&#13;
ws.run 'alist.exe server', vbHide&#13;
Set ws = Nothing&#13;
WScript.Quit&#13;
```&#13;
&#13;
### 使用方法&#13;
&#13;
1. 将代码复制到文本文件中。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/AList%20-jing-mo-yun-xing-jiao-ben.html</guid><pubDate>Sun, 15 Dec 2024 02:31:56 +0000</pubDate></item><item><title>Arch Linux 安装 KDE Plasma 桌面环境</title><link>https://bellisalpina.github.io/post/Arch%20Linux%20-an-zhuang-%20KDE%20Plasma%20-zhuo-mian-huan-jing.html</link><description># Arch Linux 安装 KDE Plasma 桌面环境&#13;
&#13;
本文介绍 Arch Linux 安装 KDE Plasma 桌面环境的过程&#13;
&#13;
## 1. 创建一个非 root 用户&#13;
&#13;
使用`useradd`命令创建一个新用户，并将其添加到`wheel`组，以便能够使用`sudo`提升权限&#13;
```&#13;
useradd -m -G wheel -s /bin/bash myarch&#13;
```&#13;
这里的`myarch`是希望创建的用户名&#13;
&#13;
## 2. 设置用户密码&#13;
&#13;
使用`passwd`命令为新用户设置密码：&#13;
```&#13;
passwd myarch&#13;
```&#13;
## 3. 配置 sudo 权限&#13;
&#13;
使用`visudo`命令编辑`/etc/sudoers`文件，以允许`wheel`组的用户使用`sudo`&#13;
&#13;
```&#13;
visudo&#13;
```&#13;
`visudo`会打开默认的编辑器编辑`/etc/sudoers`文件&#13;
&#13;
可以通过设置环境变量来选择其他编辑器，例如`nano`：&#13;
```&#13;
export EDITOR=nano&#13;
visudo&#13;
```&#13;
不建议直接使用文本编辑器编辑`/etc/sudoers`文件，可能会导致配置错误  &#13;
`visudo`会在保存时自动检查语法，如果有错误，系统会警告并拒绝保存更改&#13;
&#13;
找到以下行并去掉前面的注释符号，这将允许`wheel`组的用户使用`sudo`命令：&#13;
```&#13;
#%wheel ALL=(ALL:ALL) ALL&#13;
```&#13;
完成编辑后，保存并退出编辑器&#13;
&#13;
## 4. 安装 KDE Plasma&#13;
&#13;
安装 plasma 元软件包、konsole 终端以及 dolphin 文件管理器&#13;
```&#13;
pacman -S plasma-meta konsole dolphin&#13;
```&#13;
&#13;
## 5. 安装 sddm 图形登录管理器&#13;
&#13;
使用以下命令安装`sddm`图形登录管理器：&#13;
```&#13;
pacman -S sddm&#13;
```&#13;
启用并立即启动`sddm`：&#13;
```&#13;
systemctl enable --now sddm&#13;
```&#13;
至此已经能看到图形化的登录界面了。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Arch%20Linux%20-an-zhuang-%20KDE%20Plasma%20-zhuo-mian-huan-jing.html</guid><pubDate>Sun, 27 Oct 2024 11:28:42 +0000</pubDate></item><item><title>添加 Arch Linux CN 软件源并安装 yay 以管理 AUR 软件包</title><link>https://bellisalpina.github.io/post/tian-jia-%20Arch%20Linux%20CN%20-ruan-jian-yuan-bing-an-zhuang-%20yay%20-yi-guan-li-%20AUR%20-ruan-jian-bao.html</link><description># 添加 Arch Linux CN 软件源并安装 yay 以管理 AUR 软件包&#13;
&#13;
## 1. 添加 Arch Linux CN 源&#13;
&#13;
编辑`/etc/pacman.conf`，在末尾添加两行：&#13;
```&#13;
[archlinuxcn]&#13;
Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch&#13;
```&#13;
&#13;
## 2. 信任 GPG 密钥&#13;
&#13;
安装`archlinuxcn-keyring`前需要信任`farseerfc`的 GPG 密钥，否则可能会安装失败，使用以下命令在本地信任`farseerfc`的 GPG 密钥：&#13;
```&#13;
pacman-key --lsign-key 'farseerfc@archlinux.org'&#13;
```&#13;
&#13;
## 3. 安装 ArchLinuxCN Keyring&#13;
&#13;
安装`archlinuxcn-keyring`包以导入 GPG 密钥&#13;
```&#13;
pacman -Sy archlinuxcn-keyring&#13;
```&#13;
&#13;
## 4. 更新软件包数据库&#13;
&#13;
配置完源后，使用以下命令更新软件包数据库：&#13;
```&#13;
pacman -Syy&#13;
```&#13;
&#13;
## 5. 安装 yay&#13;
&#13;
使用以下命令安装 yay：&#13;
```&#13;
pacman -S yay&#13;
```&#13;
至此，已成功添加 ArchLinuxCN 源并安装了 yay，可以开始使用 yay 来管理 AUR 软件包了。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/tian-jia-%20Arch%20Linux%20CN%20-ruan-jian-yuan-bing-an-zhuang-%20yay%20-yi-guan-li-%20AUR%20-ruan-jian-bao.html</guid><pubDate>Sun, 27 Oct 2024 09:46:20 +0000</pubDate></item><item><title>Arch Linux 基础安装</title><link>https://bellisalpina.github.io/post/Arch%20Linux%20-ji-chu-an-zhuang.html</link><description># Arch Linux 基础安装&#13;
&#13;
本文基于，已通过包括但不限于U盘刻录ISO镜像等方式，启动进入到 Live 环境下&#13;
&#13;
安装将全部以 UEFI+GPT 的形式进行，传统 BIOS 方式不再赘述&#13;
&#13;
安装 Arch Linux 的过程中需要**稳定的网络连接**&#13;
&#13;
如果只能使用无线网络，需要事先把 Wi-Fi 名称改成英文，因为安装时无法显示和输入中文&#13;
&#13;
## 1. 禁用 reflector 服务&#13;
&#13;
2020 年，Arch Linux安装镜像中加入了`reflector`服务，`reflector`会自动选择速度合适的镜像源，但结果并不准确，特定情况下，它会误删某些有用的源信息&#13;
&#13;
通过以下命令将该服务禁用：&#13;
```&#13;
systemctl stop reflector.service&#13;
```&#13;
## 2. 验证是否为 UEFI 引导模式&#13;
&#13;
执行命令：&#13;
```&#13;
ls /sys/firmware/efi/efivars&#13;
```&#13;
如果输出了一堆东西(EFI变量)，则说明已在 UEFI 模式&#13;
&#13;
## 3. 连接网络&#13;
&#13;
大部分情况下，DHCP能很好地自动配置IP和DNS，如果需要配置静态IP和DNS，自行参考Arch Wiki&#13;
&#13;
对于有线连接，插入网线即可&#13;
&#13;
对于无线连接，则需进行如下操作&#13;
&#13;
无线连接使用`iwctl`命令进行，按照如下步骤进行网络连接：&#13;
```&#13;
iwctl                           #执行iwctl命令，进入交互式命令行&#13;
device list                     #列出设备名，比如无线网卡叫wlan0&#13;
station wlan0 scan              #扫描网络&#13;
station wlan0 get-networks      #列出网络 比如想连接xxxxx这个无线网络&#13;
station wlan0 connect xxxxx     #连接 输入密码&#13;
exit                            #成功后exit退出&#13;
```&#13;
连接成功后通过`ping`测试网络连接：&#13;
```&#13;
ping www.baidu.com&#13;
```&#13;
&#13;
## 4. 更新系统时间&#13;
&#13;
在 Live 环境中`systemd-timesyncd`默认启用，也就是说当系统已经创建互联网连接后，系统时间将自动同步&#13;
&#13;
使用`timedatectl`确保系统时间是同步的：&#13;
```&#13;
timedatectl&#13;
```&#13;
如果时间不同步，使用以下命令：&#13;
```&#13;
timedatectl set-ntp true    #将系统时间与网络时间进行同步&#13;
timedatectl status          #检查服务状态&#13;
```&#13;
&#13;
## 5. 磁盘分区&#13;
&#13;
使用`fdisk`查看并确定要操作的磁盘：&#13;
```&#13;
fdisk -l&#13;
```&#13;
本文使用以下分区方案：&#13;
+ EFI 分区： `/efi`  &#13;
+ 根分区： `/`  &#13;
+ 用户主目录： `/home`  &#13;
&#13;
首先将磁盘转换为 GPT 格式，假设磁盘名称为`sdx`，NVME 的固态硬盘磁盘名称可能为`nvme0n1`&#13;
```&#13;
parted /dev/sdx     #执行parted，进入交互式命令行&#13;
mklabel gpt         #将磁盘类型转换为GPT 如磁盘有数据会警告 输入yes即可&#13;
quit                #quit退出parted命令行交互&#13;
```&#13;
**接下来使用分区工具 (fdisk、parted、cfdisk等等) 对磁盘进行分区，不同工具操作方式不同，此处不过多赘述**&#13;
&#13;
建议将 EFI 分区设置为磁盘的第一个分区，避免可能出现的兼容性问题&#13;
&#13;
分区结束后，用`fdisk`复查磁盘的情况：&#13;
&#13;
```&#13;
fdisk -l&#13;
```&#13;
&#13;
## 6. 格式化分区&#13;
&#13;
创建分区后，必须使用合适的文件系统对每个新创建的分区进行格式化&#13;
&#13;
以下命令中的`sdax`中，`x`代表分区的序号，与上一步创建分区时的序号对应&#13;
&#13;
使用`mkfs.ext4`格式化根分区和用户主目录：&#13;
```&#13;
mkfs.ext4 /dev/sdax&#13;
```&#13;
使用`mkfs.fat`格式化 EFI 分区：&#13;
```&#13;
mkfs.fat -F 32 /dev/sdax&#13;
```&#13;
&#13;
## 7. 挂载分区&#13;
&#13;
挂载是有顺序的，必须先挂载根分区，再挂载其他分区，此处`sdax`仅为举例，请根据实际情况挂载&#13;
&#13;
将根分区挂载到 `/mnt`&#13;
```&#13;
mount /dev/sdax /mnt&#13;
```&#13;
挂载 EFI 分区&#13;
```&#13;
mount --mkdir /dev/sdax /mnt/efi&#13;
```&#13;
挂载用户主目录&#13;
```&#13;
mount --mkdir /dev/sdax /mnt/home&#13;
```&#13;
&#13;
## 8. 选择镜像站&#13;
&#13;
`/etc/pacman.d/mirrorlist`定义了软件包会从哪个镜像站下载&#13;
&#13;
使用 `curl`从 archlinux 官方网站的镜像站列表下载位于中国大陆的 HTTPS 镜像站&#13;
```&#13;
curl -L 'https://archlinux.org/mirrorlist/?country=CN&amp;protocol=https' -o /etc/pacman.d/mirrorlist&#13;
```&#13;
手动编辑`/etc/pacman.d/mirrorlist`，取消注释以启用镜像站&#13;
&#13;
## 9. 安装系统&#13;
&#13;
使用`pacstrap`安装必须的软件包：&#13;
```&#13;
pacstrap -K /mnt base base-devel linux-zen linux-zen-headers linux-firmware&#13;
```&#13;
功能性软件：&#13;
```&#13;
pacstrap -K /mnt sudo networkmanager nano vim&#13;
```&#13;
&#13;
## 10. 生成 fstab 文件&#13;
&#13;
`fstab`用来定义磁盘分区&#13;
```&#13;
genfstab -U /mnt &gt;&gt; /mnt/etc/fstab&#13;
```&#13;
**强烈建议**在执行完以上命令后，检查一下生成的`/mnt/etc/fstab`文件是否正确&#13;
&#13;
## 11. chroot 到新安装的系统&#13;
&#13;
通过以下命令 chroot 到新安装的系统：&#13;
```&#13;
arch-chroot /mnt&#13;
```&#13;
&#13;
## 12. 设置时区&#13;
&#13;
通过以下命令设置时区：&#13;
```&#13;
ln -sf /usr/share/zoneinfo/Region(地区名)/City(城市名) /etc/localtime&#13;
```&#13;
将当前的系统时间同步到硬件时钟：&#13;
```&#13;
hwclock --systohc&#13;
```&#13;
&#13;
## 13. 区域和本地化设置&#13;
&#13;
编辑`/etc/locale.gen`，然后取消掉`en_US.UTF-8`和`zh_CN.UTF-8`的注释&#13;
&#13;
接着执行`locale-gen`以生成 locale 信息：&#13;
```&#13;
locale-gen&#13;
```&#13;
然后创建`/etc/locale.conf`文件，并编辑设定 LANG 变量：&#13;
```&#13;
LANG=en_US.UTF-8&#13;
```&#13;
并不推荐在此设置任何中文 locale，这可能会导致 tty 上中文显示为方块。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Arch%20Linux%20-ji-chu-an-zhuang.html</guid><pubDate>Sun, 27 Oct 2024 08:47:52 +0000</pubDate></item><item><title>Windows 11恢复旧版右键菜单</title><link>https://bellisalpina.github.io/post/Windows%2011-hui-fu-jiu-ban-you-jian-cai-dan.html</link><description># Windows 11恢复旧版右键菜单&#13;
&#13;
要在Windows 11中恢复旧版右键菜单，可以通过修改注册表实现。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Windows%2011-hui-fu-jiu-ban-you-jian-cai-dan.html</guid><pubDate>Wed, 23 Oct 2024 15:39:39 +0000</pubDate></item><item><title>使用官方脚本一键安装Docker</title><link>https://bellisalpina.github.io/post/shi-yong-guan-fang-jiao-ben-yi-jian-an-zhuang-Docker.html</link><description>Docker在&lt;https://get.docker.com&gt;提供了一个便捷脚本，用于将 Docker 非交互式地安装到开发环境中，不建议在生产环境中使用该便捷脚本，该脚本是开源的，可以在GitHub上的[docker-install](https://github.com/docker/docker-install)仓库中找到它&#13;
&#13;
脚本运行过程中使用阿里云的镜像安装：&#13;
```&#13;
curl -fsSL https://get.docker.com -o get-docker.sh&#13;
sh ./get-docker.sh --mirror Aliyun&#13;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/shi-yong-guan-fang-jiao-ben-yi-jian-an-zhuang-Docker.html</guid><pubDate>Fri, 11 Oct 2024 11:32:00 +0000</pubDate></item><item><title>Linux终端临时配置代理</title><link>https://bellisalpina.github.io/post/Linux-zhong-duan-lin-shi-pei-zhi-dai-li.html</link><description># Linux终端临时配置代理&#13;
&#13;
在Linux中，给当前终端临时配置代理可以通过设置环境变量来实现。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Linux-zhong-duan-lin-shi-pei-zhi-dai-li.html</guid><pubDate>Fri, 11 Oct 2024 01:01:43 +0000</pubDate></item><item><title>Debian12替换为USTC源</title><link>https://bellisalpina.github.io/post/Debian12-ti-huan-wei-USTC-yuan.html</link><description># Debian12替换为USTC源  

```
echo 'deb https://mirrors.ustc.edu.cn/debian/ bookworm main contrib non-free non-free-firmware
# deb-src https://mirrors.ustc.edu.cn/debian/ bookworm main contrib non-free non-free-firmware

deb https://mirrors.ustc.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware
# deb-src https://mirrors.ustc.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware

deb https://mirrors.ustc.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware
# deb-src https://mirrors.ustc.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware

deb https://mirrors.ustc.edu.cn/debian-security/ bookworm-security main contrib non-free non-free-firmware
# deb-src https://mirrors.ustc.edu.cn/debian-security/ bookworm-security main contrib non-free non-free-firmware' &gt;/etc/apt/sources.list
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Debian12-ti-huan-wei-USTC-yuan.html</guid><pubDate>Wed, 09 Oct 2024 12:38:51 +0000</pubDate></item><item><title>SSH通过密钥登录服务器</title><link>https://bellisalpina.github.io/post/SSH-tong-guo-mi-yao-deng-lu-fu-wu-qi.html</link><description># SSH通过密钥登录服务器  &#13;
&#13;
要通过SSH密钥登录到服务器，需要生成一对密钥(公钥和私钥)，并将公钥放置在服务器上  &#13;
&#13;
### 1. 生成密钥对&#13;
使用以下命令生成一对SSH密钥：&#13;
```&#13;
ssh-keygen -t rsa&#13;
```&#13;
- 按照提示，可以选择密钥保存的位置和设置一个密钥锁码，也可以留空以实现无密码登录&#13;
&#13;
### 2. 添加公钥到服务器&#13;
1. 登录到服务器&#13;
2. 创建 `.ssh` 目录(如果尚不存在)&#13;
   ```&#13;
   mkdir -p ~/.ssh&#13;
   ```&#13;
3. 将公钥内容添加到 `authorized_keys` 文件中：&#13;
   ```&#13;
   cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys&#13;
   ```&#13;
4. 设置正确的权限：&#13;
   ```&#13;
   chmod 600 ~/.ssh/authorized_keys&#13;
   chmod 700 ~/.ssh&#13;
   ```&#13;
&#13;
### 3. 配置SSH服务&#13;
确保SSH服务允许使用密钥登录，编辑SSH配置文件 `/etc/ssh/sshd_config`，确保以下选项被设置为 `yes`：&#13;
```&#13;
PubkeyAuthentication yes&#13;
```&#13;
如果希望禁用密码登录，可以设置：&#13;
```&#13;
PasswordAuthentication no&#13;
```&#13;
完成后，重启SSH服务：&#13;
```&#13;
sudo service sshd restart&#13;
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/SSH-tong-guo-mi-yao-deng-lu-fu-wu-qi.html</guid><pubDate>Wed, 09 Oct 2024 05:13:10 +0000</pubDate></item><item><title>Ubuntu启用BBR</title><link>https://bellisalpina.github.io/post/Ubuntu-qi-yong-BBR.html</link><description># Ubuntu启用BBR

### 1. 检查内核版本
确保系统内核版本为4.9或更高，通过以下命令检查内核版本：
```
uname -r
```
### 2. 修改系统配置
修改`sysctl.conf`以启用BBR，执行以下命令将配置添加到`/etc/sysctl.conf`文件中：
```
echo 'net.core.default_qdisc=fq' | tee -a /etc/sysctl.conf
echo 'net.ipv4.tcp_congestion_control=bbr' | tee -a /etc/sysctl.conf
```
- 第一条命令设置默认队列规则为`fq`(Fair Queueing)
- 第二条命令将TCP拥塞控制算法设置为BBR

### 3. 应用更改
修改完成后，重新加载sysctl配置以使更改生效，运行以下命令：
```
sysctl -p
```

### 5. 检查BBR模块
虽然BBR是内核自带的，不需要作为独立模块加载，但可以使用以下命令确认BBR模块是否已加载：
```
lsmod | grep bbr
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/Ubuntu-qi-yong-BBR.html</guid><pubDate>Wed, 09 Oct 2024 04:44:48 +0000</pubDate></item><item><title>给java程序挂代理</title><link>https://bellisalpina.github.io/post/gei-java-cheng-xu-gua-dai-li.html</link><description># 给java程序挂代理&#13;
&#13;
+ **命令行挂Socks5代理**&#13;
&#13;
启动Socks5代理命令如下&#13;
```&#13;
java -DsocksProxyHost=127.0.0.1 -DsocksProxyPort=7890 -jar xxxxx.jar&#13;
```&#13;
`socksProxyHost`是主机，`socksProxyPort`是端口号&#13;
&#13;
* * * * *&#13;
+ **命令行挂HTTP代理**&#13;
&#13;
如果想对一个Java程序设置HTTP代理，按如下所示设置&#13;
```&#13;
java -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=7890 -Dhttps.proxyHost=127.0.0.1 -Dhttps.proxyPort=7890 -jar xxxxx.jar&#13;
```&#13;
`http.proxyHost` 和`http.proxyPort`用于设置HTTP代理&#13;
&#13;
`https.proxyHost`和 `https.proxyPort`用于设置HTTPS代理&#13;
&#13;
* * * * *&#13;
+ **使用系统代理**&#13;
```&#13;
java -Djava.net.useSystemProxies=true -jar xxxxx.jar&#13;
```&#13;
那么 xxxxx.jar 程序将会走系统代理&#13;
。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/gei-java-cheng-xu-gua-dai-li.html</guid><pubDate>Wed, 09 Oct 2024 03:14:12 +0000</pubDate></item><item><title>TeamSpeak3教程</title><link>https://bellisalpina.github.io/post/TeamSpeak3-jiao-cheng.html</link><description># 一.安装教程&#13;
&#13;
![](https://s2.loli.net/2024/03/31/AOvqCJLnHarwKxm.png)&#13;
&#13;
⬇️**用户协议，拉到底才能勾选同意协议**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/3O7Unc6FafBkvKP.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/uwt6WgMcvZoh3ps.png)&#13;
&#13;
⬇️**安装路径，点击 Browse 并选择路径**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/uBdPyASjgQtiw3N.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/qYSAUDxBwKrXF6n.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/6Q8Zw4hYrCvt1pW.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/ngjNQH1EdPAswoB.png)&#13;
&#13;
&#13;
⬇️**第一次打开会弹出用户协议，拉到底然后同意**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/FypmXrhzclOwo7J.png)&#13;
&#13;
&#13;
&#13;
## ◾汉化教程&#13;
&#13;
**软件处于打开状态，然后双击打开汉化文件**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/mUNIPQX4fiHt75g.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/ZIaMNHWoOTFwlzB.png)&#13;
&#13;
![](https://s2.loli.net/2024/03/31/k26DAMoCfi3GLsB.png)&#13;
&#13;
**手动关闭软件再打开，可以看到汉化成功了**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/AnfLwpXc8sZ2H97.png)&#13;
&#13;
&#13;
&#13;
---&#13;
&#13;
&#13;
&#13;
# 二.连接服务器&#13;
&#13;
![](https://s2.loli.net/2024/03/31/lbqjKsLdSVOXp12.png)&#13;
&#13;
⬇️**输入服务器地址，并给自己取个昵称**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/xB8r4Zoqub12mna.png)&#13;
&#13;
&#13;
&#13;
## ◾添加书签&#13;
&#13;
**把服务器添加到书签，方便以后连接**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/tW4YikfPMKSbFQI.png)&#13;
&#13;
&#13;
&#13;
---&#13;
&#13;
&#13;
&#13;
# 三.设置按键通话&#13;
&#13;
![](https://s2.loli.net/2024/03/31/oMbJlWGViXaORNt.png)&#13;
&#13;
⬇️**选择按键通话，并设置一个快捷键，下方“数字信号处理”的选项按自己需求开或关**  &#13;
&#13;
![](https://s2.loli.net/2024/03/31/lLD3qC6YXWGpyJu.png)&#13;
&#13;
**然后点 OK 保存设置**  &#13;
。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/TeamSpeak3-jiao-cheng.html</guid><pubDate>Wed, 09 Oct 2024 03:04:27 +0000</pubDate></item><item><title>为Git设置代理</title><link>https://bellisalpina.github.io/post/wei-Git-she-zhi-dai-li.html</link><description># 为Git设置代理&#13;
&#13;
&gt; 以**Clash**为例  &#13;
&#13;
## HTTP/HTTPS协议  &#13;
使用 HTTP / HTTPS 传输协议连接到 Git 仓库的 URL 实例如下：  &#13;
```&#13;
http://github.com/example/example.git&#13;
https://github.com/example/example.git&#13;
```&#13;
 &#13;
+ 全局代理  &#13;
```&#13;
git config --global http.proxy http://127.0.0.1:7890&#13;
```&#13;
+ 只代理Github  &#13;
```&#13;
git config --global http.https://github.com.proxy http://127.0.0.1:7890&#13;
```&#13;
+ 撤销全局代理  &#13;
```&#13;
git config --global --unset http.proxy&#13;
```&#13;
+ 撤销代理GitHub&#13;
```&#13;
git config --global --unset http.https://github.com.proxy&#13;
```&#13;
&#13;
&#13;
## SSH协议  &#13;
使用 SSH 传输协议连接到 Git 仓库的 URL 实例如下：&#13;
```&#13;
git@github.com:example/example.git&#13;
ssh://git@github.com/example/example.git&#13;
```&#13;
&#13;
以下内容仅限**Windows**端Git  &#13;
+ 编辑`C:\Users\example\.ssh\config`，输入以下内容：  &#13;
```&#13;
Host github.com&#13;
    User git&#13;
    ProxyCommand connect -H 127.0.0.1:7890 %h %p&#13;
```&#13;
+ 撤销代理：删除添加的内容。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/wei-Git-she-zhi-dai-li.html</guid><pubDate>Wed, 09 Oct 2024 02:57:34 +0000</pubDate></item><item><title>WireGuard搭建虚拟个人网络</title><link>https://bellisalpina.github.io/post/WireGuard-da-jian-xu-ni-ge-ren-wang-luo.html</link><description># WireGuard搭建虚拟个人网络

### 安装WireGuard
```
# 安装wireguard
apt install wireguard

# 开启流量转发
echo 'net.ipv4.ip_forward = 1' | tee -a /etc/sysctl.conf
sysctl -p
```

### 进入配置存储路径，调整目录权限
```
chmod 700 /etc/wireguard
cd /etc/wireguard
```

### 生成公钥私钥
```
wg genkey | tee server.key | wg pubkey &gt; server.key.pub
```

### 生成client1公钥私钥
```
wg genkey | tee client1.key | wg pubkey &gt; client1.key.pub
```

### 创建服务器配置文件
```
echo '
[Interface]
PrivateKey = $(cat server.key)
Address = 10.0.0.1/24
ListenPort = 51820

PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
#注意eth0需要为本机物理网卡名称

[Peer]
PublicKey = $(cat client1.key.pub)
AllowedIPs = 10.0.0.2/32' &gt; wg0.conf
```

### 增加client2
```
# 生成公钥私钥
wg genkey | tee client2.key | wg pubkey &gt; client2.key.pub

# 追加到wg0.conf配置
echo '
[Peer]
PublicKey =  $(cat client2.key.pub)
AllowedIPs = 10.0.0.3/32' &gt;&gt; wg0.conf
```

### 设置WireGuard服务自启
```
systemctl enable wg-quick@wg0.service
```

### 启动WireGuard
```
# 启动wg0
wg-quick up wg0
# 关闭wg0
wg-quick down wg0
```

### 创建client1配置
```
echo '
[Interface]
PrivateKey = $(cat client1.key)
Address = 10.0.0.2/24
DNS = 119.29.29.29

[Peer]
PublicKey = $(cat server.key.pub)
AllowedIPs = 10.0.0.0/24
Endpoint = 公网IP:51820
PersistentKeepalive = 30' &gt; client1.conf
```。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/WireGuard-da-jian-xu-ni-ge-ren-wang-luo.html</guid><pubDate>Wed, 09 Oct 2024 02:38:46 +0000</pubDate></item><item><title>如何在GitHub正确地使用curl下载文件？</title><link>https://bellisalpina.github.io/post/ru-he-zai-GitHub-zheng-que-di-shi-yong-curl-xia-zai-wen-jian-%EF%BC%9F.html</link><description># 如何在GitHub正确地使用curl下载文件？  &#13;
&#13;
下载与原始文件同名的文件的常用语法非常简单：&#13;
&#13;
```&#13;
curl -O URL&#13;
```&#13;
&#13;
这在大多数情况下都有效，但是，有时从 GitHub 或 SourceForge 下载文件时，它不会获取正确的文件  &#13;
&#13;
## **使用 curl 正确下载存档文件**  &#13;
&#13;
这里的问题是 URL 重定向到实际的存档文件，为此，需要使用其他选项  &#13;
&#13;
```&#13;
curl -JLO URL&#13;
```&#13;
&#13;
选项可以按任何顺序排列  &#13;
&#13;
这是基于 curl 命令手册页的选项的快速说明：  &#13;
&#13;
- J：此选项告诉 -O, --remote-name 选项使用服务器指定的 Content-Disposition 文件名，而不是从 URL 中提取文件名  &#13;
- L：如果服务器报告请求的页面已移动到不同的位置（用 Location: 标头和 3XX 响应代码指示），此选项将使 curl 在新位置重做请求  &#13;
- O：使用此选项，无需指定下载的输出文件名  。</description><guid isPermaLink="true">https://bellisalpina.github.io/post/ru-he-zai-GitHub-zheng-que-di-shi-yong-curl-xia-zai-wen-jian-%EF%BC%9F.html</guid><pubDate>Wed, 09 Oct 2024 00:53:53 +0000</pubDate></item></channel></rss>